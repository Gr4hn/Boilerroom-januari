Old code from functions.cpp:

/* void AccountSelection (BankAccount &account, map<int, BankAccount> *accounts, bool &accountSelected) {
    system("cls");
    cout << "Enter a bank account number to enter the banking system: " << endl;
    for (auto &acc : *accounts) {
        cout << "Account Number: " << acc.second.getAccountNum(funcMtx) << endl << "Balance: " << acc.second.getBalance() << endl << endl;
    }
    cout << "Enter a bank account number: ";
    int accountNum;
    cin >> accountNum;
    auto it = accounts->find(accountNum);
    if (it != accounts->end()) {
        account = it->second;
        cout << "Account selected: " << account.getAccountNum(funcMtx) << endl;
        accountSelected = true;
        Sleep(2000);
    } else {
        cout << "Account not found." << endl;
        cout << "Please try again." << endl;
        Sleep(2000);
        system("cls");
        AccountSelection(account, accounts, accountSelected);
    }
}

void mainMenu (BankAccount &account, map<int, BankAccount> *accounts, bool &accountSelected, BankManagement bankManagement, bool &running) {
    system("cls");
    cout << "Welcome to the Main Menu" << endl << endl;
    Sleep(2000);
    system("cls");
    if (accountSelected = true) {
        do
        {
            int choiceInMenu;
            system("cls");
            cout << "Main menu" << endl << "Current account: " << account.getAccountNum() 
            << endl << "Current Balance: " << account.getBalance() << endl << endl
            << "1. Deposit" << endl << "2. Withdraw" << endl << "3. Add a new bank account" << endl << "4. Change bank account"
            << endl << "5. Exit program" << endl << endl << "Enter your choice: ";
            cin >> choiceInMenu;
            switch (choiceInMenu) {
            case 1:
                cout << "Enter an amount to deposit: ";
                int amountToDeposit;
                cin >> amountToDeposit;
                account.deposit(amountToDeposit);
                cout << "Your new balance is: " << account.getBalance();
                cin.ignore();
                cin.get();
                break;
            case 2:
                cout << "Enter an amount to withdraw: ";
                int amountToWidthdraw;
                cin >> amountToWidthdraw;
                account.withdraw(amountToWidthdraw);
                cout << "Your new balance is: " << account.getBalance();
                cin.ignore();
                cin.get();
                break;
            case 3:
                cout << "Enter a new bank account number: ";
                int newAccountNum;
                cin >> newAccountNum;
                bankManagement.addBankAccount(newAccountNum);
                accounts->emplace(newAccountNum, BankAccount(newAccountNum));
                cout << "New account added: " << newAccountNum;
                cin.ignore();
                cin.get();
                break;
            case 4:
                AccountSelection(account, accounts, accountSelected);
                break;
            case 5:
                cout << "Exiting program...";
                Sleep(1000);
                running = false;
                break;
            default: 
                cout << "Enter a choice from the list";
                Sleep(2000);
                break;
            }
        } while (running);
    }
    else {
        AccountSelection(account, accounts, accountSelected);
    }
    system("cls");
    cout << "Goodbye!" << endl;
    Sleep(2000);
} */

/* void Client2 (BankAccount &account, map<int, BankAccount> *accounts) {
    cout << "Client 2 is running" << endl; 
    {
        lock_guard<mutex> lock(mtx);
        cout << account.getBalance() << endl;
    }
    this_thread::sleep_for(chrono::milliseconds(500));
    account.deposit(randomBalance());
    cout << "Client 2 has deposited to account : " << accounts->begin()->first << ". Current balance: " << account.getBalance() << endl;
    this_thread::sleep_for(chrono::milliseconds(500));
    account.withdraw(randomBalance());
    cout << "Client 2 has withdrawn from account : " << accounts->begin()->first << ". Current balance: " << account.getBalance() << endl;
    this_thread::sleep_for(chrono::milliseconds(500));
} */

Old program from first Boilerroom:

/* #include <iostream>
#include <map>
#include <thread>
#include <mutex>
#include <chrono>
#include <random>
#include <ctime>

using namespace std;

mutex mtx, classMTx;

class BankAccount {
    private:
        int balance;
    public:
        BankAccount() {
             this->balance = balance;
        } 
    
        BankAccount(int balance) {
            this->balance = balance;
           
        }
    
    void deposit(int amount) {
            lock_guard<mutex> lock(classMTx);
            balance += amount;
        }
    void withdraw(int amount) {
            lock_guard<mutex> lock(classMTx);
            balance -= amount;
        }
    int getBalance() {
            lock_guard<mutex> lock(classMTx);
            return balance;
        }
};

class BankManagement {
    private:

    public:
        map<int, BankAccount> accounts;
        map<int, BankAccount>::iterator it = accounts.begin();
};

int randomBalance () {
    srand(time(NULL));
    int random = rand() % 1000 + 45;
    return random;
}

int randomAccontNumber () {
    srand(time(NULL));
    int random1 = rand() % 10000 + 45;
    int random2 = random1 + rand() % 10000 + 45; 
    int first = random1;
    int second;
    do {
        second = random2;
    } while (second == first);

    return first, second;
}

void Client1 (BankAccount &account, map<int, BankAccount> *accounts) {
    cout << "Client 1 is running" << endl;
    {
        lock_guard<mutex> lock(mtx);
        cout << account.getBalance() << endl;
    }
    this_thread::sleep_for(chrono::milliseconds(500));
    {
        lock_guard<mutex> lock(mtx);
        account.deposit(randomBalance());
        cout << "Client 1 has deposited to account : " << accounts->begin()->first << ". Current balance: " << account.getBalance() << endl;

    }
    this_thread::sleep_for(chrono::milliseconds(500));
    {
        lock_guard<mutex> lock(mtx);
        account.withdraw(randomBalance());
        cout << "Client 1 has withdrawn from account: " << accounts->begin()->first << ". Current balance: " << account.getBalance() << endl;
    }
    this_thread::sleep_for(chrono::milliseconds(500));
}

int main() {
    cout << "Hello, World!" << endl;

    BankAccount account1(1000);
    BankAccount account2(2000);
    BankAccount account3(3000);
/*     BankAccount account4(4000);
    BankAccount account5(5000); */

    cout << "Account 1 balance: " << account1.getBalance() << endl;

    
    map<int, BankAccount> accounts;
    
    accounts[1] = account1;
    accounts[2] = account2;
    accounts[3] = account3; // Assign a unique key for account3
    
    //Thread 1
    thread t1 ([&account1, &accounts]() {
        //mtx.lock();
        cout << "Thread 1 is running" << endl;
        Client1(account1, &accounts);
        //mtx.unlock();
    });

    //Thread 2
    thread t2 ([&account2, &accounts]() {
        //this_thread::sleep_for(chrono::seconds(2));
        //mtx.lock();
        cout << "Thread 2 is running" << endl;
        Client1(account2, &accounts);
        //mtx.unlock();
    });



    t1.join();
    t2.join();
    return 0;
} */